let selector={email_pattern:/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,name_pattern:/^[A-Za-z\s\-]+$/,phone_pattern:/^[0-9]+$/,zip_pattern:/^[0-9-a-z-A-Z]+$/,handle:location.href.split("/")[4]},initialiseselector=(selector2,handle)=>{switch(handle){case"login":{['[action="/account/login"]','[action="/account/recover"]'].forEach((formSelector,index)=>{let form=document.querySelector(formSelector),submitBtn=form.querySelector("button"),inputFields=index==0?form.querySelectorAll("[name*=customer]"):form.querySelector('[name="email"]');createErrorContainer(form,index),index==0?addEventsToMultipleFields(form,submitBtn,inputFields,selector2,"customer"):addEventsToSingleField(form,submitBtn,inputFields,selector2)});break}case"register":{let form=document.querySelector('[action="/account"]'),submitBtn=form.querySelector("button"),inputFields=form.querySelectorAll("[name*=customer]");createErrorContainer(form,0),addEventsToMultipleFields(form,submitBtn,inputFields,selector2,"customer");break}case"addresses":{let form=document.querySelector('[action="/account/addresses"]'),submitBtn=form.querySelector("button"),inputFields=form.querySelectorAll("[name*=address]");createErrorContainer(form,0),addEventsToMultipleFields(form,submitBtn,inputFields,selector2,"address");break}case"contact-us":{let form=document.querySelector('.main--contact_form[action*="/contact"]'),submitBtn=form.querySelector("button"),inputFields=form.querySelectorAll("[name*=contact]");createErrorContainer(form,0),addEventsToMultipleFields(form,submitBtn,inputFields,selector2,"contact");break}case"reset":{let form=document.querySelector('[action="/account/reset"]'),submitBtn=form.querySelector("button"),inputFields=form.querySelectorAll("[name*=customer]");createErrorContainer(form,0),addEventsToMultipleFields(form,submitBtn,inputFields,selector2,"customer");break}case"login#recover":{initialiseselector(selector2,"login");break}case"contact":{initialiseselector(selector2,"contact-us");break}}},createErrorContainer=(form,index)=>{let errorHtml='<span class="error-svg-container"> <svg focusable="false" width="18" height="26" class="icon icon--form-error" viewBox="0 0 18 26"> <circle cx="9" cy="13" r="8" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none"></circle> <path d="M8.993 15.262a.972.972 0 00-.979.968c0 .539.44.99.98.99a.99.99 0 00.978-.99.972.972 0 00-.979-.968zm-.78-.649h1.561V8.706H8.212v5.907z" fill="currentColor"></path> </svg> </span> <span class="form--error">**Email required</span>',styleHtml="<style>.form--error-container{color:red;text-align:center;font-size:16px;margin-bottom:24px;background:#fdf0f0;padding:13px 18px;display:flex;justify-content:flex-start}.error-svg-container{margin-right:10px}.hide{display:none!important}[type=submit]:disabled{cursor:not-allowed!important}</style>";index==0?document.head.innerHTML+=styleHtml:document.head.innerHTML+="";const newNode=document.createElement("div");newNode.classList.add("form--error-container","hide"),form.insertBefore(newNode,form.querySelectorAll("input")[0]),form.querySelector(".form--error-container").innerHTML=errorHtml},addEventsToMultipleFields=(form,button,inputFields,selector2,formType)=>{disableSubmitBtn(button,!0),inputFields.forEach(field=>{let fieldType=field.getAttribute("name").split(formType+"[")[1].split("]")[0];["last_name","first_name","email","name","country","city","phone","address1","zip","password","password_confirmation"].includes(fieldType)?["last_name","country"].includes(fieldType)?field.setAttribute("data-status","true"):field.setAttribute("data-status","false"):field.setAttribute("no-status",""),["input","blur","change"].forEach(evt=>{field.addEventListener(evt,e=>{validateDetails(form,button,e.currentTarget,selector2,fieldType)})})})},addEventsToSingleField=(form,button,inputField,selector2)=>{disableSubmitBtn(button,!0),["input","blur","change"].forEach(evt=>{inputField.addEventListener(evt,e=>{validateDetails(form,button,e.currentTarget,selector2,"email")})})},disableSubmitBtn=(button,status)=>{status?button.setAttribute("disabled",""):button.removeAttribute("disabled")},validateDetails=(form,button,field,selector2,type)=>{let isBlank=field.value=="",errorSpan=form.querySelector(".form--error-container .form--error");switch(type){case"email":{let isInvalidString=!!(!field.value.match(selector2.email_pattern)||field.value.match(selector2.phone_pattern));manageError(isBlank?"Email required":isInvalidString?"Invalid Email.":"",errorSpan,field,button,form);break}case"password":{let isShortString=field.value.length<8,isResetPasswordError=selector2.handle=="reset"&&form.querySelector('[name="customer[password_confirmation]"]').value.length>7;isBlank?manageError("Password required",errorSpan,field,button,form):isShortString?manageError("Min. 8 characters required",errorSpan,field,button,form):(manageError("",errorSpan,field,button,form),isResetPasswordError?validateDetails(form,button,form.querySelector('[name="customer[password_confirmation]"]'),selector2,"password_confirmation"):console.log());break}case"first_name":{let isInvalidString=!field.value.match(selector2.name_pattern),isShortString=field.value.length<3;manageError(isBlank?"Name required":isInvalidString?"Invalid name":isShortString?"Min. 3 characters required":"",errorSpan,field,button,form);break}case"last_name":{let isInvalidString=!field.value.match(selector2.name_pattern);manageError(isBlank?"":isInvalidString?"Invalid Last name":"",errorSpan,field,button,form);break}case"phone":{let isInvalidString=!field.value.match(selector2.phone_pattern),isInvalidlength=field.value.length<8||field.value.length>15;manageError(isBlank?"Phone required":isInvalidString?"Invalid Phone Number":isInvalidlength?"Digit count should be between 8-15":"",errorSpan,field,button,form);break}case"address1":{let isShortString=field.value.length<3;manageError(isBlank?"Address required":isShortString?"Min. 3 characters required":"",errorSpan,field,button,form);break}case"city":{let isInvalidString=!field.value.match(selector2.name_pattern),isShortString=field.value.length<3;manageError(isBlank?"City required":isInvalidString?"Invalid City":isShortString?"Min. 3 characters required":"",errorSpan,field,button,form);break}case"zip":{let isInvalidString=!field.value.match(selector2.zip_pattern),isShortString=field.value.length<3;manageError(isBlank?"Zip Code required":isInvalidString?"Invalid Zip Code":isShortString?"Min. 3 characters required":"",errorSpan,field,button,form);break}case"country":{let isInvalidString=!!field.value.includes("-");manageError(isInvalidString?"Select Country":"",errorSpan,field,button,form);break}case"name":{validateDetails(form,button,field,selector2,"first_name");break}case"password_confirmation":{let isShortString=field.value.length<8,isNotSame=form.querySelector('[name="customer[password]"]').value!=field.value;manageError(isBlank?"Confirm password required":isShortString?"Min. 8 characters required":isNotSame?"Both passwords should be same":"",errorSpan,field,button,form);break}}},manageError=(message,errorSpan,field,button,form)=>{message.trim()!=""?(errorSpan.innerHTML=message,field.setAttribute("data-status","false"),errorSpan.parentElement.classList.remove("hide"),disableSubmitBtn(button,!0)):(errorSpan.innerHTML="",field.setAttribute("data-status","true"),errorSpan.parentElement.classList.add("hide"),checkStatus(form,button))},checkStatus=(form,button)=>{let inputFields=form.querySelectorAll("[data-status]"),trueStatus=0;inputFields.forEach(field=>{field.getAttribute("data-status")=="true"?trueStatus+=1:trueStatus+=0}),trueStatus==inputFields.length?disableSubmitBtn(button,!1):disableSubmitBtn(button,!0)};initialiseselector(selector,selector.handle);
//# sourceMappingURL=/cdn/shop/t/19/assets/ced-validation.js.map?v=134532207691872921991661267750
